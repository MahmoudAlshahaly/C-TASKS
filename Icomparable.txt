using System;

namespace Day5
{
    enum Gender
    {
        Male, Female
    }
    [Flags]
    enum Privileges : byte
    {
        guest=1, developer=2, secretary = 4, DBA=8
    }
    class Date
    {
        int day, month, year;
        public Date(int _day, int _month, int _year)
        {
            Day = _day;
            Month = _month;
            Year = _year;
        }
        public Date(string Date)
        {
            string[] dateNumbers = Date.Split('-', '/');// To get the data in different formate
            Day = int.Parse(dateNumbers[0]);
            Month = int.Parse(dateNumbers[1]);
            Year = int.Parse(dateNumbers[2]);
        }
        public int Day
        {
            set
            {
                if (value < 31)
                {
                    day = value;
                }
                else
                {
                    throw new Exception();
                }
            }
            get
            {
                return day;
            }
        }
        public int Month
        {
            set
            {
                if (month < 12)
                {
                    month = value;
                }
                else
                {
                    throw new Exception();
                }
            }
            get
            {
                return month;
            }
        }
        public int Year
        {
            set
            {
                if (value > 0)
                {
                    year = value;
                }
                else
                {
                    throw new Exception();
                }
            }
            get
            {
                return year;
            }
        }
        public override string ToString()
        {
            return $"{year}-{month}-{day}";
        }
    }
    class projects
    {
        public int id { get; set; }
        public string name { get; set; }
        public projects(int id = 0, string name = "")
        {
            this.id = id;
            this.name = name;
        }
        public override string ToString()
        {
            return $"{id}-{name}";
        }
    }
    class Employee:IComparable<Date>
    {
        int id;
        double salary;
        Gender gender;
        Privileges privilage;
        Date hiringDate;
        public projects[] project { get; set; }
        public Employee(int _id, double _salary, string _gender, int _priviage , string _hiringDate, projects[] project=null)
        {
            id = _id;
            salary = _salary;
            gender = (Gender)Enum.Parse(typeof(Gender), _gender);
            privilage = (Privileges)_priviage;
            hiringDate = new Date(_hiringDate);
            this.project = project;
        }
        public Employee()
        {

        }
        //for icomparable
        //public int CompareTo(object? obj)
        //{
        //    Employee p = obj as Employee;
        //    return Convert.ToDateTime(hiringDate.ToString()).CompareTo( Convert.ToDateTime(p.hiringDate.ToString()));
        //}
        //for icomparable generic
        public int CompareTo(Date? obj)
        {
            return Convert.ToDateTime(hiringDate.ToString()).CompareTo(Convert.ToDateTime(obj.ToString()));
        }
        //public Employee(projects[] project) 
        //    //:this(id,salary,gender,)
        //{
        //    this.project = project;
        //}
        public int Id
        {
            set
            {
                id = value;
            }
            get
            {
                return id;
            }
        }
        public Date HiringDate
        {
            set
            {
                hiringDate = value;
                //hiringDate.Day = value.Day;
                //hiringDate.Month = value.Month;
                //hiringDate.Year = value.Year;
            }
            get
            {
                return hiringDate;
            }
        }
        public double Salary
        {
            set
            {
                salary = value;
            }
            get
            {
                return salary;
            }
        }
        public Gender Gender
        {
            set
            {
                gender = value;
            }
            get
            {
                return gender;
            }
        }
        public Privileges Privileges
        {
            set
            {
                privilage = value;
            }
            get
            {
                return privilage;
            }
        }
        public override string ToString()
        {
            return $"The Id = {Id}\nThe Salary = {Salary}\nThe Gender = {Gender}\n The Privilage = {Privileges}\n The Hiring Date = {HiringDate.ToString()}";
        }

        public string this[int id]
        {
            set
            {
                for (int i = 0; i < project.Length; i++)
                {
                    if (project[i].id == id)
                        project[i].name = value;
                }
            }
            get
            {
                for (int i = 0; i < project.Length; i++)
                {
                    if (project[i].id == id)
                        return project[i].name;


                }
                return "";
            }

        }
    }
    class Program
    {
        static void Main()
        {
            #region Getting Data From User
            Console.WriteLine("Enter The Number of Employees");
            int EmployeeNumber = int.Parse(Console.ReadLine());
            Employee[] arr = new Employee[EmployeeNumber];
            for (int i = 0; i < arr.Length; i++)
            {
                arr[i] = new Employee();
                Console.WriteLine($"Enter The data of Employee Number {i + 1} ");
               
                Console.Write("The Id : ");
                arr[i].Id = int.Parse(Console.ReadLine());
                
                Console.Write("The Salary : ");
                arr[i].Salary = int.Parse(Console.ReadLine());
                
                Console.Write("The Gender : ");
                string stringGender = Console.ReadLine();
                arr[i].Gender = (Gender)Enum.Parse(typeof(Gender), stringGender);
                
                Console.Write("The Privilage : ");
                int Priviage =int.Parse(Console.ReadLine());
                arr[i].Privileges = (Privileges)Priviage;

                Console.Write("The Day of Hiring : ");
                arr[i].HiringDate = new Date(Console.ReadLine());
            }
            Array.Sort(arr);
            for (int i = 0; i < arr.Length; i++)
            {
                Console.WriteLine(arr[i].ToString());
            }
            #endregion

            //for (int i = 0; i < arr.Length; i++)
            //{
            //    Console.WriteLine($"\nThe Data of Employee Number {i + 1}");
            //    Console.WriteLine(arr[i].ToString());
            //}
            //#endregion


            //projects[] proj = new projects[]
            //{
            //   new projects(1, "hospital"),
            //   new projects(2,"House"),
            //   new projects(3,"Road")
            //};
            //Employee emp = new Employee(arr[0].Id, arr[0].Salary, arr[0].Gender.ToString(),Convert.ToInt32(arr[0].Privileges), arr[0].HiringDate.ToString(), proj);
            //emp[1] = "Hotal";
            //Console.WriteLine(emp.ToString());
            //Console.WriteLine(emp[1]);
            //Console.WriteLine(emp[2]);
            //Console.WriteLine(emp[3]);

        }

    }
}
